;   Copyright (c) Dmitry Belikov. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php).
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

(ns minimvp.unittests
  (:require
    [clojure.browser.repl :as repl]
    [clojure.browser.dom :as cdom]
    [clojure.string :as cstring]
    [goog.object :as goog-object]
    [goog.events :as goog-events]
    [goog.events.EventType :as goog-events-type]
    [goog.ui.Component.EventType :as goog-ui-component-eventtype]
    [goog.ui.ColorButton :as color-button]
    [goog.ui.Tab :as gtab]
    [goog.string :as gstring]
    [goog.crypt.base64 :as base64]
    [goog.ui.TabBar :as gtabb]
    [goog.ui.Textarea :as gtextarea]
    [minimvp.core :as mvp-core]))

(repl/connect "http://localhost:9000/repl")

;; ---------------------= UNIT TESTS =------------------------
;; Main entry function
(defn set-value-basic-dbg
  [orig-value path new-value]
  (let [m (mvp-core/create orig-value)]
    (mvp-core/set-value-basic m path new-value)
    (mvp-core/get-value m [])))

(defn set-value-changes-version
  "True if set-value caused version change"
  [orig-value path new-value]
  (let [m (mvp-core/create orig-value 88 inc)]
    (mvp-core/set-value-basic m path new-value)
    (not=
     (first @(:model m))
     88)))

(defn equal-json
  "Verifies that the provided two values are the same in JSON representation.
   ClojureScript adds some run-time information to types, this is a workaround to make comparison work."
  [o1 o2]
  #(js/equal
      (mvp-core/clj->json o1)
      (mvp-core/clj->json o2)))

(defn ^:export tests []
  ;; Populate a DOM
  (js/test "A basic test" #(js/ok true "is fine"))

  (js/test
   "UUID generates strings of 16 characters"
   #(js/equal
     16
     (alength (mvp-core/generate-unique-version))))

  (js/test
   "wrap/primitive get"
   #(js/equal
     265
    (mvp-core/get-mvp-model (mvp-core/create 265))))
  
  (js/test
   "Wrap into MVP/get returns the same value"
   #(js/equal
    5525
    (mvp-core/get-value (mvp-core/create [0 1 {:first 1 :second [3 4 5525]}]) [2 :second 2] ) ) )

  (js/test
   "check default for get-value"
   #(js/equal
    "default"
    (mvp-core/get-value (mvp-core/create [0 1 {:first 1 :second [3 4 5525]}]) [2 :second 3] "default")))

  (js/test
   "Wrap into MVP/get returns the same value"
   #(js/equal
    1361
    (mvp-core/get-value (mvp-core/create 1361) [])))

  (js/test
   "MVP/get for vectors"
   #(js/equal
    "c"
    (mvp-core/get-value (mvp-core/create ["a" "b" "c"]) [2])))
    
  (js/test
   "MVP/get for maps"
   #(js/equal
    52
    (mvp-core/get-value (mvp-core/create {:a 35 :b 52}) [:b])))

  (js/test
   "MVP/get default/missing value"
   #(js/equal
    "default"
    (mvp-core/get-value (mvp-core/create ["a" "b" "c"]) [5] "default")))

  (js/test
   "get-value for referenced models"
   #(js/equal
    5525
    (mvp-core/get-value (mvp-core/create-ref (mvp-core/create [0 1 {:first 1 :second [3 4 5525]}]) [2 :second]) [2])) )

  (js/test
   "default for referenced models"
   #(js/equal
    "default"
    (mvp-core/get-value (mvp-core/create-ref (mvp-core/create [0 1 {:first 1 :second [3 4 5525]}]) [2]) [:second 3] "default")))

  (js/test
   "version initialization"
   #(js/equal
    :version
    (first @(:model (mvp-core/create [0 1 {:first 1 :second [3 4 5525]}] :version inc)))))

  ;; versioning after updates
   (js/test
    "new UUID gets generated by default"
    #(js/equal
     16
     (alength (mvp-core/increment-version (mvp-core/create 34)))))

   (js/test
    "new UUID gets generated by default"
    #(js/equal
     13
     (mvp-core/increment-version (mvp-core/create nil 12 inc) )))

   (js/test
    "test empty path"
    #(js/equal
     0
     (set-value-basic-dbg 1 [] 0) ) )

   (js/test
    "test 1-level set-value-impl"
    (equal-json
     [1 0]
     (set-value-basic-dbg [1] [1] 0)))

   (js/test
    "test 2-level set-value-impl with non-existing element"
    (equal-json
      [1 {:first {:second 0}}]
      (set-value-basic-dbg [1] [1 :first :second] 0) ) )

   (js/test
    "test 2-level set-value-impl with existing element"
    (equal-json
      [[1 2] [2 1] [3 4]]
      (set-value-basic-dbg [ [1 2] [2 3] [3 4]] [1 1] 1)) )

   (js/test
    "test 3-level set-value-impl with a map"
    (equal-json
      [[1 2] [2 {:first 1, :second "s"} 3] [3 4]]
      (set-value-basic-dbg [ [1 2] [2 {:first "f" :second "s" } 3] [3 4]] [1 1 :first] 1)) )

   ;; test that no update happens in case of equality
   (js/test
    "test update equality"
    (equal-json
      false
      (set-value-changes-version 1 [] 1)))

   (js/test
    "test update equality"
    (equal-json
      false
      (set-value-changes-version [0 1 2] [1] 1)) )

   (js/test
    "test update inequality"
    (equal-json
      true
      (set-value-changes-version 1 [] 21)) )

   (js/test
    "test update equality"
    (equal-json
      true
      (set-value-changes-version [0 1 2] [1] 2)) )

   ;; add subscription
   (js/test
    "add a writer"
    (equal-json
     []
     (let [mvp (mvp-core/create 1) ]
       (mvp-core/add-writer mvp [] inc)
       (second (first @(:writers mvp))))) )

   (js/test
    "current value for the writer"
    (equal-json
     1515
     (let [mvp (mvp-core/create 1515) ]
       (mvp-core/add-writer mvp [] inc)
       @(nth (first @(:writers mvp)) 2)) ) )
   
   (js/test
    "current value for the writer"
    (equal-json
     1515
     (let [mvp (mvp-core/create 1515) ]
       (mvp-core/add-writer mvp [] inc)
       @(nth (first @(:writers mvp)) 2)) ) )

   (js/test
    "add a reader"
    (equal-json
      [1 :second 1]
      (let [mvp (mvp-core/create [ 0 { :second [1 2 3] :third 2 } 2 ])
            mvp2 (mvp-core/create-ref mvp [1 :second])]
        (mvp-core/add-reader mvp2 [1] inc)
        (second (first @(:readers mvp))))) )

   (js/test
    "add a reader"
    (equal-json
      2
      (let [mvp (mvp-core/create [ 0 { :second [1 2 3] :third 2 } 2 ])
            mvp2 (mvp-core/create-ref mvp [1 :second])]
        (mvp-core/add-reader mvp2 [1] inc)
        @(nth (first @(:readers mvp)) 2))) )

  (js/test
   "change happened"
   (equal-json
    [true 4 4]
    (let [mvp (mvp-core/create [0 1 2])
          new-val (atom 0)]
      (mvp-core/add-writer mvp [1] #(reset! new-val (:new-value %)))
      (mvp-core/set-value-basic mvp [1] 4)
      (let [return (mvp-core/trigger-subscribers mvp @(:writers mvp))]
        [return @new-val @(nth (first @(:writers mvp)) 2)]))) )

  (js/test
   "no change"
   (equal-json
    [1 1]
    (let [mvp (mvp-core/create [0 1 2])
          invocation (atom 0)]
      (mvp-core/add-writer mvp [1] #(swap! invocation inc))
      (mvp-core/set-value-basic mvp [1] 1)
      (mvp-core/trigger-subscribers mvp @(:writers mvp))
      [@invocation @(nth (first @(:writers mvp)) 2)]) ))

  (js/test
   "change happen in the process, second guy isn't called"
   (equal-json
    [false 2 4 1 5]
    (let [mvp (mvp-core/create [0 1 2])
          invoke-1 (atom 0)
          invoke-2 (atom 0)]
      (mvp-core/add-writer mvp [1] #(do
                                      (mvp-core/set-value-basic mvp [1] 5)
                                      (swap! invoke-1 inc)))
      (mvp-core/add-writer mvp [1] #(swap! invoke-2 inc))
      (mvp-core/set-value-basic mvp [1] 4)
      (let [return (mvp-core/trigger-subscribers mvp @(:writers mvp))]
        [return @invoke-1 @(nth (first @(:writers mvp)) 2)
         @invoke-2 @(nth (second @(:writers mvp)) 2)])) ) )
  
  (js/test
   "verify resolve-mvp-ref"
   (equal-json
     [1 [2 3 4]]
     (mvp-core/resolve-mvp-ref '(1 [2 3]) [4]) ) )
  
  (js/test
   "verify resolve-mvp-ref"
   (equal-json
     [{:something 1} [4]]
     (mvp-core/resolve-mvp-ref { :something 1 } [4])) )

  (js/test
   "raise event and see that subscribers are properly invoked"
   (equal-json
    [2 1 [0 54 2]]
    (let [mvp (mvp-core/create [0 1 2])
          writer-called (atom 0)
          reader-called (atom 0)]
      (mvp-core/add-writer mvp [1] #(swap! writer-called inc))
      (mvp-core/add-writer mvp [2] #(swap! reader-called inc))
      (mvp-core/delay-events mvp #(mvp-core/set-value-basic mvp [1] 54))
      [@writer-called @reader-called (second @(:model mvp))]) ))

  (js/test
   "change the same element multiple times, check that proper subscriber is invoked only once"
   (equal-json
    [2 1 [0 161 2]]
    (let [mvp (mvp-core/create [0 1 2])
          writer-called (atom 0)
          reader-called (atom 0)]
      (mvp-core/add-writer mvp [1] #(swap! writer-called inc))
      (mvp-core/add-reader mvp [2] #(swap! reader-called inc))
      (mvp-core/delay-events mvp
        (fn []
          (mvp-core/delay-events mvp
            #(do
               (mvp-core/set-value-basic mvp [1] 23)
               (mvp-core/set-value-basic mvp [1] 12)))
          (mvp-core/set-value-basic mvp [1] 161)))
      [@writer-called @reader-called (second @(:model mvp))])))

  (js/test
   "change the same element in the writer, check that proper reader is invoked only once.
        check that model only updated twice"
   (equal-json
    [3 1 1 [3 [0 1000 2]]]
    (let [mvp (mvp-core/create [0 1 2] 0 inc)
          writer-called (atom 0)
          reader-called (atom 0)
          second-reader-called (atom 0)]
      (mvp-core/add-writer mvp [1] #(do
                                 (mvp-core/set-value-basic mvp [1] 1000)
                                 (swap! writer-called inc)))
      (mvp-core/add-reader mvp [1] #(swap! reader-called inc))
      (mvp-core/add-writer mvp [2] #(swap! second-reader-called inc))

      (mvp-core/delay-events mvp #(mvp-core/set-value-basic mvp [1] 54))
      [@writer-called @reader-called @second-reader-called @(:model mvp)]) ) )

  (js/test
   "sub-path match"
   (equal-json
     true
     (mvp-core/if-subpaths-match [0 1] [0 1])) )

  (js/test
   "sub-path match"
   (equal-json
     false
     (mvp-core/if-subpaths-match [0 1 2] [0 1])) )

  (js/test
   "sub-path match"
   (equal-json
     true
     (mvp-core/if-subpaths-match [0 1] [0 1 2])) )

  (js/test
   "sub-path match"
   (equal-json
     false
     (mvp-core/if-subpaths-match [0 1] [1 2 3])) )

  (js/test
   "sub-path match"
   (equal-json
     false
     (mvp-core/if-subpaths-match [0 1] [0 2 3])) )


  (js/test
   "clear tests"
   (equal-json
    [[3 4] [1 3] [0 2] [0 0]]
    (let [mvp (mvp-core/create [[1 [2 3 4] 5 ] 2 3 4] 0 inc)
          get-readers #(count @(:readers mvp))
          get-writers #(count @(:writers mvp))
          result (atom [])]
      (mvp-core/add-reader mvp [] identity)
      (mvp-core/add-writer mvp [0] identity)
      (mvp-core/add-reader mvp [0] identity)
      (mvp-core/add-writer mvp [0 1] identity)
      (mvp-core/add-writer mvp [0 1 2] identity)
      (mvp-core/add-reader mvp [0 1 45] identity)
      (mvp-core/add-reader mvp [3] identity)

      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [0 1])
      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [0])
      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [])
      (swap! result conj [(get-writers) (get-readers)])

      @result)))

  (js/test
   "clear tests with MVP reference model"
   (equal-json
    [[3 4] [1 3] [0 2] [0 0]]
    (let [mvp (mvp-core/create [[1 [2 3 4] 5 ] 2 3 4] 0 inc)
          get-readers #(count @(:readers mvp))
          get-writers #(count @(:writers mvp))
          mvp-ref (mvp-core/create-ref mvp [0 1])
          result (atom [])]

      (mvp-core/add-reader mvp [] identity)
      (mvp-core/add-writer mvp [0] identity)
      (mvp-core/add-reader mvp [0] identity)
      (mvp-core/add-writer mvp-ref [] identity)
      (mvp-core/add-writer mvp-ref [2] identity)
      (mvp-core/add-reader mvp-ref [45] identity)
      (mvp-core/add-reader mvp [3] identity)

      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [0 1])
      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [0])
      (swap! result conj [(get-writers) (get-readers)])

      (mvp-core/clear mvp [])
      (swap! result conj [(get-writers) (get-readers)])

      @result)))

  (js/test
   "update-value"
   (equal-json
     [135 2]
     (let [m (mvp-core/create 34 0 inc)]
       (mvp-core/update-value m [] inc)
       [(mvp-core/update-value m [] + 100) (mvp-core/version m)])))

  (js/test
   "assoc-value"
   (equal-json
     [1 16]
     (let [m (mvp-core/create 34 0 inc)]
       (mvp-core/assoc-value m [] 16))) )
  
  )
